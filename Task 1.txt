DIFFERENCE BETWEEN HTTP1.1 AND HTTP 2 :-


To contextualize the specific changes that HTTP/2 made to HTTP/1.1, let’s first take a high-level look at the historical development and basic workings of each.

HTTP/1.1
Developed by Timothy Berners-Lee in 1989 as a communication standard for the World Wide Web, HTTP is a top-level application protocol that exchanges information between a client computer and a local or remote web server. In this process, a client sends a text-based request to a server by calling a method like GET or POST. In response, the server sends a resource like an HTML page back to the client.

There is much to discuss about the lower levels of this stack, but in order to gain a high-level understanding of HTTP/2, you only need to know this abstracted layer model and where HTTP figures into it.

With this basic overview of HTTP/1.1 out of the way, we can now move on to recounting the early development of HTTP/2.

HTTP/2

HTTP/2 began as the SPDY protocol, developed primarily at Google with the intention of reducing web page load latency by using techniques such as compression, multiplexing, and prioritization. This protocol served as a template for HTTP/2 when the Hypertext Transfer Protocol working group httpbis of the IETF (Internet Engineering Task Force) put the standard together, culminating in the publication of HTTP/2 in May 2015. From the beginning, many browsers supported this standardization effort, including Chrome, Opera, Internet Explorer, and Safari. Due in part to this browser support, there has been a significant adoption rate of the protocol since 2015, with especially high rates among new sites.

From a technical point of view, one of the most significant features that distinguishes HTTP/1.1 and HTTP/2 is the binary framing layer, which can be thought of as a part of the application layer in the internet protocol stack. As opposed to HTTP/1.1, which keeps all requests and responses in plain text format, HTTP/2 uses the binary framing layer to encapsulate all messages in binary format, while still maintaining HTTP semantics, such as verbs, methods, and headers. An application level API would still create messages in the conventional HTTP formats, but the underlying layer would then convert these messages into binary. This ensures that web applications created before HTTP/2 can continue functioning as normal when interacting with the new protocol.



OBJECTS AND ITS INTERNAL REPRESENTATION IN JAVASCRIPT :-


How are the JavaScript window and JavaScript document different from one another?
What is a JavaScript window?

The window is at a root/top level at the JavaScript object hierarchy. It  is a global/root object in JavaScript and it is the root object of the Document object model(DOM);

What is a JavaScript document?

A document is an object inside the window object and we use a document object for manipulation inside the document.

The first thing that gets loaded into the browser is the window and the properties related to that window are stored in the window object. Properties related to window objects are length, innerWidth, innerHeight, caches, etc.

There was a document object too so what about it then?

So after the window gets loaded then there’s a document (HTML, PHP, or another document) loaded inside that window, and the properties related to that document is stored in the document object.
 Properties related to document objects are title, URL, cookie, etc.


Syntax:

window object:
window.propertyname;

document object:
document.propertyname
// OR
window.document.propertyname


Document 
It represents the document loaded inside the window or browser.
The properties related to it are stored in the document object.
It is loaded after the loading window because the window contains a document.
It is the root element of the document object model.
It is an object of window.
We can not access windows objects properties inside the document.
logically:
document:{ properties}


Example: document.title will return the title of the document


Window 
It represents the browser window in which you are seeing the content.
The properties related to it are stored in the window object.
It is loaded before the document because window container document.
The window is the global element for all objects, functions, etc.
It is an object of the browser.
We can access document object properties inside the window.
logically:
    window:{
        document:{properties}
    }
Example: window.document.title will return the title of the document
